#pragma once
#include <cstdarg>
#include "define.h"
namespace Eloquent {
    namespace ML {
        namespace Port {
            class SVM {
                public:
                    /**
                    * Predict class for features vector
                    */
                    int predict(float *x) {
                        float kernels[14] = { 0 };
                        float decisions[1] = { 0 };
                        int votes[2] = { 0 };
                        kernels[0] = compute_kernel(x,   0.08  , 0.03  , -0.13  , -0.04  , -0.24  , 0.11  , -21.48  , -0.43  , -2.04  , 1.12  , -8.0  , -0.0  , -0.01  , 0.01  , 0.01  , -0.79  , 0.04  , -23.27  , -2.08  , -2.68  , 0.57  , -7.54 );
                        kernels[1] = compute_kernel(x,   0.09  , 0.07  , -0.11  , -0.34  , -0.05  , -0.02  , -21.48  , -0.43  , -2.04  , 1.13  , -1.96  , 0.01  , -0.0  , -0.02  , 0.26  , 1.05  , 0.1  , -23.27  , -2.08  , -2.68  , 0.95  , -5.14 );
                        kernels[2] = compute_kernel(x,   0.04  , 0.04  , -0.15  , 0.02  , -0.54  , -0.14  , 14.49  , 3.18  , -3.19  , 0.42  , -16.3  , -0.01  , 0.01  , 0.0  , -0.48  , 0.44  , 0.1  , 12.47  , 1.48  , -3.81  , 1.67  , -14.6 );
                        kernels[3] = compute_kernel(x,   0.05  , 0.04  , -0.1  , 0.27  , -0.24  , -0.08  , 14.49  , -0.43  , 1.43  , 0.9  , -10.46  , 0.0  , -0.01  , -0.01  , 0.56  , -0.36  , 0.22  , 12.47  , -2.08  , 0.69  , 0.12  , -13.23 );
                        kernels[4] = compute_kernel(x,   0.05  , 0.03  , -0.14  , 0.14  , -0.24  , -0.38  , 14.49  , 3.18  , -3.19  , 1.85  , -17.52  , -0.0  , 0.01  , 0.01  , -0.84  , 0.01  , -0.33  , 12.47  , 1.48  , -3.81  , 2.93  , -17.07 );
                        kernels[5] = compute_kernel(x,   0.07  , 0.03  , -0.11  , 0.02  , -0.18  , -0.5  , 14.49  , 4.38  , 1.43  , 0.84  , -2.68  , -0.0  , -0.0  , -0.01  , 0.07  , 0.19  , -0.21  , 12.47  , 2.67  , 0.69  , 0.65  , 0.92 );
                        kernels[6] = compute_kernel(x,   0.03  , 0.0  , -0.04  , -0.22  , -0.17  , 1.12  , 0.43  , -1.51  , -11.4  , 0.43  , 5.36  , -0.0  , 0.0  , -0.01  , 2.33  , 2.02  , -0.97  , 1.33  , -1.87  , -31.76  , 0.83  , 8.45 );
                        kernels[7] = compute_kernel(x,   -0.18  , -0.06  , -0.05  , -1.18  , -0.46  , 1.33  , 4.63  , 1.99  , -0.04  , -1.27  , 1.66  , 0.01  , 0.0  , -0.0  , 2.11  , 1.06  , -0.24  , 4.97  , 2.22  , -0.26  , -0.73  , -0.66 );
                        kernels[8] = compute_kernel(x,   -2.79  , -8.98  , 5.4  , 0.39  , -0.72  , -0.07  , -12.72  , -2.04  , -38.16  , -47.44  , -30.24  , 0.96  , -0.75  , -0.03  , -13.55  , -13.49  , 2.73  , -14.73  , -1.33  , -35.8  , -47.29  , -31.51 );
                        kernels[9] = compute_kernel(x,   -0.17  , -0.03  , -0.15  , -0.57  , -1.55  , 1.33  , -1.36  , 3.19  , -2.35  , -1.77  , 5.33  , 0.01  , 0.0  , 0.01  , 2.35  , -1.2  , 0.31  , -0.98  , 3.4  , -2.51  , -1.62  , 4.28 );
                        kernels[10] = compute_kernel(x,   0.02  , -0.02  , 0.0  , 0.09  , -0.54  , 0.75  , 1.62  , 3.3  , 40.63  , -2.27  , 0.36  , -0.0  , 0.01  , -0.01  , 0.38  , -0.24  , -0.18  , 2.52  , 2.88  , 18.86  , -1.56  , 3.88 );
                        kernels[11] = compute_kernel(x,   -0.19  , -0.06  , -0.04  , -0.69  , -1.25  , 1.52  , -1.36  , 0.79  , -0.04  , -0.92  , 4.1  , 0.02  , -0.01  , 0.01  , 1.07  , -2.11  , 0.24  , -0.98  , 1.03  , -0.26  , -1.64  , 2.85 );
                        kernels[12] = compute_kernel(x,   -0.19  , -0.06  , -0.14  , -0.75  , -0.7  , 0.91  , -0.16  , 1.99  , -0.04  , -1.07  , 1.81  , -0.0  , 0.0  , 0.01  , 1.56  , 0.08  , -0.67  , 0.21  , 2.22  , -0.26  , -0.56  , 2.15 );
                        kernels[13] = compute_kernel(x,   -2.85  , -8.99  , 5.46  , 0.15  , -1.63  , 0.85  , -13.92  , -0.84  , -69.37  , -47.62  , -28.55  , 1.0  , -0.61  , -0.18  , -2.02  , 13.0  , -3.38  , -15.93  , -0.14  , -66.18  , -47.29  , -29.94 );
                        float decision = 0.450906516983;
                        decision = decision - ( + kernels[0] * -0.001  + kernels[1] * -0.001  + kernels[2] * -0.001  + kernels[3] * -0.001  + kernels[4] * -6.0148327e-05  + kernels[5] * -0.001 );
                        decision = decision - ( + kernels[6] * 4.6140043e-05  + kernels[7] * 0.001  + kernels[8] * 0.0002834105  + kernels[9] * 0.000862200417  + kernels[10] * 0.000695010719  + kernels[11] * 0.001  + kernels[12] * 0.001  + kernels[13] * 0.000173386649 );

                        return decision > 0 ? 0 : 1;
                    }

                protected:
                    /**
                    * Compute kernel between feature vector and support vector.
                    * Kernel type: linear
                    */
                    float compute_kernel(float *x, ...) {
                        va_list w;
                        va_start(w, 22);
                        float kernel = 0.0;

                        for (uint16_t i = 0; i < 22; i++) {
                            kernel += x[i] * va_arg(w, double);
                        }

                        return kernel;
                    }
                };
            }
        }
    }